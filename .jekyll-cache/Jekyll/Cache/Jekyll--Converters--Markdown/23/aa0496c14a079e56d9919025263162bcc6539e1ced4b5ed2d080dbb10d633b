I"O0<h1 id="raft-算法之领导人选举">Raft 算法之领导人选举</h1>

<p>Raft 论文地址：https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf</p>

<p>Raft论文中分为三块：</p>

<ul>
  <li>领导选举</li>
  <li>日志复制</li>
  <li>安全性</li>
</ul>

<p>本文中主要介绍<code class="highlighter-rouge">领导人选举</code></p>

<h2 id="raft中的节点状态">Raft中的节点状态</h2>

<p>Raft中的节点有三种状态：</p>

<ul>
  <li>领导人状态：<code class="highlighter-rouge">Leader</code></li>
  <li>跟随者状态：<code class="highlighter-rouge">Follower</code></li>
  <li>候选人状态：<code class="highlighter-rouge">Candidate</code></li>
</ul>

<p>每一个节点都是一个状态机，Raft会根据当前的心跳，任期等状态来进行状态的迁移转化，就如下图所示：</p>

<p><img src="/assets/raft-role.png" alt="raft-role" /></p>

<p>首先，在Raft节点启动的时候，所有任务都是<code class="highlighter-rouge">Follower</code>状态， 因为此时没有<code class="highlighter-rouge">Leader</code>，所有<code class="highlighter-rouge">Follower</code>都在固定的超时时间内都收不到来自<code class="highlighter-rouge">Leader</code>的心跳，从而变成了<code class="highlighter-rouge">Candidate</code>状态，开始选举<code class="highlighter-rouge">Leader</code></p>

<p>当节点处于<code class="highlighter-rouge">Candidate</code>状态的时候，会并发的向所有的节点发出请求投票请求<code class="highlighter-rouge">RequestVote</code>（后面章节会向详细介绍），在<code class="highlighter-rouge">Candidate</code>状态下，节点可能会发生三种状态的迁移变化：</p>

<ul>
  <li><strong>开始下一轮新的选举</strong>：发出的投票请求在固定时间内没有收到其他节点的响应，或者是收到响应（或者同意投票）的节点数量没有达到 <code class="highlighter-rouge">N/2+1</code>，那么选取超时，进入下一轮选举</li>
  <li><strong>选举成功，成为新的<code class="highlighter-rouge">Leader</code></strong>：如果选举过程中收到大于<code class="highlighter-rouge">N/2+1</code>数量的节点的投票，那么选举成功，当前的节点成为新的<code class="highlighter-rouge">Leader</code></li>
  <li><strong>成为<code class="highlighter-rouge">Follower</code></strong>：如果选举过程中收到来及其他节点的<code class="highlighter-rouge">Leader</code>心跳，或者是请求投票响应的<code class="highlighter-rouge">Term</code>大于当前的节点<code class="highlighter-rouge">Term</code>，那么说明有新任期的<code class="highlighter-rouge">Leader</code></li>
</ul>

<p>如果节点选举成功，成为了<code class="highlighter-rouge">Leader</code>，那么<code class="highlighter-rouge">Leader</code>将会在固定周期内发送心跳到所有的节点，但是如果心跳请求收到的响应的<code class="highlighter-rouge">Term</code>大于当前节点的<code class="highlighter-rouge">Term</code>，那么当前节点的就会成为<code class="highlighter-rouge">Follower</code>。比如<code class="highlighter-rouge">Leader</code>节点的网络不稳定，掉线了一段时间，网络恢复的时候，肯定有其他节点被选为了新的<code class="highlighter-rouge">Leader</code>，但是当前节点在掉线的时候并没有发现其他节点选为<code class="highlighter-rouge">Leader</code>，仍然发送心跳给其他节点，其他节点就会把当前的新的<code class="highlighter-rouge">Term</code>响应给已经过时的<code class="highlighter-rouge">Leader</code>，从而转变成<code class="highlighter-rouge">Follower</code></p>

<h2 id="领导人选举">领导人选举</h2>

<p>整个集群必须要在丢包，乱序，延时等诸多不稳定因素的情况下，能够选举出唯一一个<code class="highlighter-rouge">Leader</code></p>

<h3 id="请求投票rpc">请求投票RPC</h3>

<p>就如上文中提到的，如果<code class="highlighter-rouge">Follower</code>在一定时间内没有收到心跳请求，那么将会切换到<code class="highlighter-rouge">Candidate</code>状态，开始一轮新的选取，选举过程中会向集群中的<strong>所有节点发送请求投票的RPC</strong></p>

<p>RPC请求参数：</p>

<ul>
  <li><code class="highlighter-rouge">term</code>：当前候选人的任期号</li>
  <li><code class="highlighter-rouge">candidateId</code>：候选人的Id</li>
  <li><code class="highlighter-rouge">lastLogIndex</code>：候选人的最后日志条目索引值</li>
  <li><code class="highlighter-rouge">lastLogTerm</code>：候选人的最后日志条目的任期号</li>
</ul>

<p>其中<code class="highlighter-rouge">lastLogIndex</code>和<code class="highlighter-rouge">lastLogTerm</code>用来判断候选人的日志是否和服务器的日志一样新（后文中会解释），必须要至少一样新才能投票。</p>

<p>RPC响应值：</p>

<ul>
  <li><code class="highlighter-rouge">term</code>：被请求节点的任期号</li>
  <li><code class="highlighter-rouge">voteGranted</code>：是否同意投票给候选人</li>
</ul>

<h4 id="candidate发送请求投票rpc">Candidate发送请求投票RPC</h4>

<h5 id="candidate何时发送请求投票rpc">Candidate何时发送请求投票RPC？</h5>

<p>如果<code class="highlighter-rouge">Leader</code>发生异常，那么基本上所有的<code class="highlighter-rouge">Follower</code>在同一时间切换为<code class="highlighter-rouge">Candidate</code>，并同时发出请求投票的RPC，那么就有可能导致选票被均衡的瓜分，从而需要重新发起新一轮的投票。为了避免选票被瓜分的问题，选举超时的是可以可以从一个固定的区间（例如<code class="highlighter-rouge">150-300</code>毫秒）随机选择。</p>

<h5 id="candidate如何发送投票rpc">Candidate如何发送投票RPC？</h5>

<ol>
  <li>自增当前节点的任期号</li>
  <li>给自己投票</li>
  <li>重置选举超时计时器</li>
  <li>发送请求投票的RPC给其他服务器</li>
</ol>

<h5 id="节点收到请求投票的rpc该如何处理">节点收到请求投票的RPC该如何处理？</h5>

<ol>
  <li>判断当前的<code class="highlighter-rouge">Term</code>的和请求投票参数中的<code class="highlighter-rouge">Term</code>：
    <ul>
      <li>如果当前的<code class="highlighter-rouge">Term</code> &gt; 请求投票参数中的<code class="highlighter-rouge">Term</code>，那么拒绝投票（设置<code class="highlighter-rouge">voteGranted</code>为<code class="highlighter-rouge">false</code>），并返回当前的<code class="highlighter-rouge">Term</code></li>
      <li>否则就更新当前<code class="highlighter-rouge">Term</code>为请求投票参数中的<code class="highlighter-rouge">Term</code>， 并将自身状态切换成<code class="highlighter-rouge">Follower</code></li>
    </ul>
  </li>
  <li>检测当前节点的投票状态：
    <ul>
      <li>如果当前的节点没有给任何其他节点投过票，或者是已经投过票给当前节点，那么继续检测日志的匹配状态（步骤3）</li>
      <li>否则，那么拒绝投票（设置<code class="highlighter-rouge">voteGranted</code>为<code class="highlighter-rouge">false</code>）， 因为一个节点在一个任期内不能同时投票给多个节点</li>
    </ul>
  </li>
  <li>检测候选人的日志是否至少比当前节点的日志新，通过比较候选人的<code class="highlighter-rouge">lastLogIndex</code>和<code class="highlighter-rouge">lastLogTerm</code>和当前节点的日志，确保新选举出来的<code class="highlighter-rouge">Leader</code>不会丢失已经提交的日志：
    <ul>
      <li>如果日志匹配，即当前的任期和候选人的任期相同，且候选人的日志长度比当前的日志长度  <strong>或者</strong>   候选人的任期比比当前节点的任期高，那么就为候选人投票（设置<code class="highlighter-rouge">votedGranted</code>为<code class="highlighter-rouge">true</code>），并成为<code class="highlighter-rouge">Follower</code></li>
      <li>否则，那么就拒绝投票（设置<code class="highlighter-rouge">voteGranted</code>为<code class="highlighter-rouge">false</code>）</li>
    </ul>
  </li>
</ol>

<h5 id="candidate收到请求投票的响应该如何处理">Candidate收到请求投票的响应该如何处理？</h5>

<p>每一个候选人在每一个任期内都会发出一轮投票请求，如果在指定时间内，收到大于<code class="highlighter-rouge">N/2+1</code>个节点的同意投票的响应，那么说明投票成功，晋升为<code class="highlighter-rouge">Leader</code></p>

<p>因为在整个投票过程中，假设网络是不稳定的，那么就有可能导致投票请求和请求的响应丢失，乱序，延时等，从而导致收到和当前任期不相匹配的响应，所以如果收到和当前任期不匹配的响应，那么就直接丢弃不处理。</p>

<p>完整的处理流程如下：</p>

<ol>
  <li>检查响应的<code class="highlighter-rouge">Term</code>是否大于当前候选人的<code class="highlighter-rouge">Term</code>：
    <ul>
      <li>如果是，那么说明有其他节点开始了新一轮的选举或者是有新的<code class="highlighter-rouge">Leader</code>被选举出来，那么就把当前节点从<code class="highlighter-rouge">Candidate</code>切换为<code class="highlighter-rouge">Follower</code>状态，并更新当前节点的<code class="highlighter-rouge">Term</code></li>
      <li>否则，进行<strong>步骤2</strong></li>
    </ul>
  </li>
  <li>检查响应的<code class="highlighter-rouge">Term</code>是否和当前的节点的<code class="highlighter-rouge">Term</code>是否相等：
    <ul>
      <li>如果相等，那么说明在指定时间内收到了投票请求的响应，那么就进行<strong>步骤3</strong></li>
      <li>否则说明这是一个过期的投票请求响应，直接丢弃</li>
    </ul>
  </li>
  <li>检查响应是否同意投票：
    <ul>
      <li>如果同意，那么增加当前任期的同意投票节点数量，并检查同意投票的节点数量大于 <code class="highlighter-rouge">N/2+1</code>，那么就切换为<code class="highlighter-rouge">Leader</code></li>
      <li>如果不同意，可能是日志不匹配，因为<code class="highlighter-rouge">Leader</code>的日志至少要比<code class="highlighter-rouge">Follower</code>的日志新</li>
    </ul>
  </li>
</ol>

<h3 id="领导人选举的安全性">领导人选举的安全性</h3>

<p>从上文的请求投票RPC的处理流程中得知，<code class="highlighter-rouge">Leader</code>不是随便选一个节点都可以成为的，如果候选人不满足要求，那么其他节点就不会给候选人投票。</p>

<p>如果集群中的任何一个节点不经过判断就能成为<code class="highlighter-rouge">Leader</code>，那么将会发生什么？这种情况可能导致已经被提交的日志被覆盖，如果状态机已经Apply了被覆盖的日志，将会导致不一致的结果。所以为了选举的安全性，<code class="highlighter-rouge">Raft</code>添加了以下的限制：</p>

<ol>
  <li><code class="highlighter-rouge">Leader</code>不会覆盖自己的任何日志，<code class="highlighter-rouge">Follower</code>严格按照<code class="highlighter-rouge">Leader</code>的日志进行复制（必要时强行覆盖）</li>
  <li>选举<code class="highlighter-rouge">Leader</code>的时候，<code class="highlighter-rouge">Candidate</code>的日志至少要比当前节点新（这个“新”稍后解释），否则就拒绝投票；因为已经提交的日志肯定是存在大于等于<code class="highlighter-rouge">N/2+1</code>个节点上的，而投票至少也需要<code class="highlighter-rouge">N/2+1</code>个节点同意，所以整个投票过程中肯定会有包含有所有已经提交日志的节点存在的。</li>
</ol>

<p>上文中的“新”就是：即当前的任期和候选人的任期相同，且候选人的日志长度比当前的日志长度  <strong>或者</strong>   候选人的任期比比当前节点的任期高</p>
:ET